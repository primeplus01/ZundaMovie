@ADC_標準登場
--track0:時間[s],-5,5,1,0.01
--track1:方向,-360,360,0,0.01
--track2:距離,0,20000,300
--track3:拡大率,0,800,100
--dialog:加減速[1-5],beki=2;減/加/S[0-2],mode=0;縦横比[%],as=0;Z軸,z=0;X回転,rx=0;Y回転,ry=0;Z回転,rz=0;

ta=obj.track0
--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
r=obj.track1+90
l=obj.track2
s=obj.track3
obj.ox=obj.ox+l*math.cos(r*math.pi/180)*t
obj.oy=obj.oy+l*math.sin(r*math.pi/180)*t
obj.oz=obj.oz+z*t
obj.zoom=obj.zoom+(s/100-1)*t
obj.aspect=obj.aspect+as/100*t
obj.rz=obj.rz+rz*t
obj.rx=obj.rx+rx*t
obj.ry=obj.ry+ry*t


@ADC_クリッピング
--track0:上1,0,2000,0
--track1:下1,0,2000,0
--track2:左1,0,2000,0
--track3:右1,0,2000,0
--dialog:時間[s],ta=1;加減速[1-5],beki=2;減/加/S[0-2],mode=0;上2,up2=0;下2,dw2=0;左2,lf2=0;右2,rt2=0;

--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
up=obj.track0+up2*t
dw=obj.track1+dw2*t
lf=obj.track2+lf2*t
rt=obj.track3+rt2*t
obj.effect("クリッピング","上",up,"下",dw,"左",lf,"右",rt)


@ADC_斜めクリッピング
--track0:中心X1,-2000,2000,0,1
--track1:中心Y1,-2000,2000,0,1
--track2:角度1,-720,720,0
--track3:幅1,-2000,2000,0,1
--dialog:時間[s],ta=1;加減速[1-5],beki=2;減/加/S[0-2],mode=0;中心X2,x2=0;中心Y2,y2=0;角度2,r2=0;幅2,w2=0;ぼかし,bk=0;

--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
x=obj.track0+x2*t
y=obj.track1+y2*t
r=obj.track2+r2*t
w=obj.track3+w2*t
obj.effect("斜めクリッピング","中心X",x,"中心Y",y,"角度",r,"ぼかし",bk,"幅",w)


@ADC_マスク
--track0:回転1,-720,720,0
--track1:サイズ1,0,2000,100
--track2:縦横比1,-100,100,0
--track3:ぼかし1,0,200,0,1
--dialog:時間[s],ta=1;加減速[1-5],beki=2;減/加/S[0-2],mode=0;マスクの種類,ty=2;X,x=0;Y,y=0;回転2,r2=0;サイズ2,s2=0;縦横比2[%],as2=0;ぼかし2,bk2=0;反転/chk,ht=0;

--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
r=obj.track0+r2*t
s=obj.track1+s2*t
as=obj.track2+as2*t
bk=obj.track3+bk2*t
obj.effect("マスク","X",x,"Y",y,"回転",r,"サイズ",s,"縦横比",as,"ぼかし",bk,"マスクの反転",ht,"type",ty)


@ADC_ぼかし
--track0:時間[s],-5,5,1,0.01
--track1:範囲1,0,300,0,1
--track2:範囲2,-300,300,0,1
--track3:縦横比,-100,100,0
--dialog:加減速[1-5],beki=2;減/加/S[0-2],mode=0;光の強さ,br=2;サイズ固定/chk,fix=0;

ta=obj.track0
--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
h=obj.track1+obj.track2*t
obj.effect("ぼかし","範囲",h,"縦横比",obj.track3,"光の強さ",br,"サイズ固定",fix)


@ADC_放射ブラー
--track0:時間[s],-5,5,1,0.01
--track1:範囲1,0,300,0
--track2:範囲2,-300,300,0
--dialog:加減速[1-5],beki=2;減/加/S[0-2],mode=0;X,x=0;Y,y=0;サイズ固定/chk,fix=0;

ta=obj.track0
--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
h=obj.track1+obj.track2*t
obj.effect("放射ブラー","範囲",h,"X",x,"Y",y,"サイズ固定",fix)


@ADC_色ずれ
--track0:幅1,0,500,5,1
--track1:幅2,-500,500,0,1
--track2:角度1,-720,720,0
--track3:角度2,-720,720,0
--dialog:時間[s],ta=1;加減速[1-5],beki=2;減/加/S[0-2],mode=0;色ずれの種類[0-2],ty=0;

--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
h=obj.track0+obj.track1*t
r=obj.track2+obj.track3*t
obj.effect("色ずれ","ずれ幅",h,"角度",r,"type",ty)


@ADC_図形
--track0:時間[s],-5,5,1,0.01
--track1:サイズ1,0,4000,100,1
--track2:サイズ2,-4000,4000,0,1
--track3:ライン1,0,4000,4000,1
--dialog:加減速[1-5],beki=2;減/加/S[0-2],mode=0;種類/fig,fig="円";色/col,col=0xffffff;ライン幅2,l2=0;

ta=obj.track0
--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果
s=obj.track1+obj.track2*t
l=obj.track3+l2*t
obj.load("figure",fig,col,s,l)


@ADC_扇状
--track0:時間[s],-5,5,1,0.01
--track1:中心角1,0,360,360
--track2:サイズ1,0,4000,100,1
--track3:ライン1,0,4000,4000,1
--dialog:加減速[1-5],beki=2;減/加/S[0-2],mode=0;色/col,col=0xffffff;中心2,c2=0;サイズ2,s2=0;ライン幅2,h2=0;

ta=obj.track0
--共通部分
if(ta==0) then
  return
elseif(ta<0) then
  t=(ta-obj.time+obj.totaltime)/ta
else
  t=(ta-obj.time)/ta
end
t=math.max(0,t)

if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

--フィルタ効果(「扇状」を改変)
c=obj.track1+c2*t
s=obj.track2+s2*t
h=obj.track3+h2*t
l=math.floor(s/2)
obj.load("figure","円",col,l*2,h)
obj.effect("斜めクリッピング","角度",180-c/2)
obj.effect("ミラー","境目調整",-l)
obj.rz=-c/2-90


@加減速エディタ_座標
--track0:X,-5000,5000,0
--track1:Y,-5000,5000,0
--track2:Z,-5000,5000,0
--track3:頂点数,1,16,1,1
--dialog:Xあり/chk,xx=1;Yあり/chk,yy=1;Zあり/chk,zz=1;グラフ内[0-1],gn=1;座標,pos={};仮想bufサイズ[%],bufsize=100;グラフ表示/chk,hojo=1;G横サイズ,gwsize=400;G縦サイズ,ghsize=300;G色/col,col=0xffff00;Gライン幅,line=5;G分割数,BN=20;

l=math.floor(line)/2
NN=obj.track3+1

--アンカーポイントの設置
obj.setanchor("pos",NN-1,"line")
for i=0,NN-2 do
  pos[2*i+1]=-gwsize/2+gwsize/NN*(i+1)
end

--補完曲線の算定(ティム氏の簡易モーションパスより一部を改変して使用)
XX={}  
YY={}
XX[0]=-gwsize/2
YY[0]=ghsize/2
XX[NN]=gwsize/2
YY[NN]=-ghsize/2
for i=1,NN-1 do
  XX[i]=pos[2*(i-1)+1]
  YY[i]=pos[2*(i-1)+2]
end

function PassXYZ(s) -- s<=1
  Ns=NN*s
  Ns1=math.floor(Ns)
  Ns2=(Ns-Ns1)/2
  if Ns1<=0 then
    nx=Ax[1]*Ns2*Ns2+Bx[1]*Ns2+Cx[1]
    ny=Ay[1]*Ns2*Ns2+By[1]*Ns2+Cy[1]
  elseif Ns1==NN-1 then
    SS1=Ns2+0.5
    nx=Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1]
    ny=Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1]
  elseif s==1 then
    nx=XX[NN]
    ny=YY[NN]
  else
    SS1=Ns2+0.5
    SS2=Ns2
    RS=2*Ns2
    nx=(Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1])*(1-RS)+RS*(Ax[Ns1+1]*SS2*SS2+Bx[Ns1+1]*SS2+Cx[Ns1+1])
    ny=(Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1])*(1-RS)+RS*(Ay[Ns1+1]*SS2*SS2+By[Ns1+1]*SS2+Cy[Ns1+1])
  end
  return nx,ny
end

Ax={};Bx={};Cx={};
Ay={};By={};Cy={};
for M=1,NN-1 do
  Ax[M]=2*XX[M-1]-4*XX[M]+2*XX[M+1]
  Bx[M]=-3*XX[M-1]+4*XX[M]-XX[M+1]
  Cx[M]=XX[M-1]
  Ay[M]=2*YY[M-1]-4*YY[M]+2*YY[M+1]
  By[M]=-3*YY[M-1]+4*YY[M]-YY[M+1]
  Cy[M]=YY[M-1]
end

obj.setoption("drawtarget","tempbuffer",obj.screen_w*bufsize/100,obj.screen_h*bufsize/100)

--加減速移動
dpx,dp = PassXYZ(obj.frame/obj.totalframe)
dp=dp/ghsize+0.5
if(gn==1) then
  dp=math.min(1,math.max(dp,0))
end
function ADC(tr,jdg)
  if(jdg==0) then
    adc=obj.getvalue(tr)
  else
    adc=obj.getvalue(tr,0,0)+(obj.getvalue(tr,0,-1)-obj.getvalue(tr,0,0))*(1-dp)
  end
  return adc
end
obj.draw(ADC(0,xx),ADC(1,yy),ADC(2,zz))

--グラフ表示
if(hojo==1) then
  Nmax=NN*BN

  --ライン描画
  obj.load("figure","四角形",col,1)
  obj.setoption("blend","alpha_mix")
  x0 = XX[0]
  y0 = YY[0]
  for i=1,Nmax do
    x1,y1 = PassXYZ(i/(NN*BN))
    if(gn==1) then
      y1=math.min(ghsize/2,math.max(y1,-ghsize/2))
    end
    r = math.atan2(y0-y1,x1-x0)
    dx = math.sin(r)*l
    dy = math.cos(r)*l
    obj.drawpoly(x0-dx,y0-dy,0,x1-dx,y1-dy,0,x1+dx,y1+dy,0,x0+dx,y0+dy,0)
    x0 = x1
    y0 = y1
  end

  --斜め線の描画
  r=math.atan2(ghsize,gwsize)
  dx = math.sin(r)*l/2
  dy = math.cos(r)*l/2
  obj.drawpoly(XX[0]-dx,YY[0]-dy,0,XX[NN]-dx,YY[NN]-dy,0,XX[NN]+dx,YY[NN]+dy,0,XX[0]+dx,YY[0]+dy,0,
               0,0,1,0,1,1,0,1, 0.5)

  --頂点の描画
  obj.load("figure","円",col,l*8)
  for i=0,Nmax do
    x0,y0 = PassXYZ(i/(NN*BN))
    if(gn==1) then
      y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
    end
    obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)
  end

  --青い点の描画
  l=l*1.5
  obj.load("figure","円",0x0000ff,l*8)
  for i=1,NN-1 do
    x0,y0=XX[i],YY[i]
    if(gn==1) then
      y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
    end
    obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)
  end

  --現在地の描画
  obj.load("figure","円",0xff0000,l*8)
  x0,y0 = PassXYZ(obj.frame/obj.totalframe)
  if(gn==1) then
    y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
  end
  obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)

  obj.setoption("blend",0)
end

obj.load("tempbuffer")


@加減速エディタ_回転
--track0:X回転,-720,720,0
--track1:Y回転,-720,720,0
--track2:Z回転,-720,720,0
--track3:頂点数,1,16,1,1
--dialog:X回転あり/chk,rx=1;Y回転あり/chk,ry=1;Z回転あり/chk,rz=1;グラフ内[0-1],gn=1;座標,pos={};仮想bufサイズ[%],bufsize=100;グラフ表示/chk,hojo=1;G横サイズ,gwsize=400;G縦サイズ,ghsize=300;G色/col,col=0xffff00;Gライン幅,line=5;G分割数,BN=20;

l=math.floor(line)/2
NN=obj.track3+1

--アンカーポイントの設置
obj.setanchor("pos",NN-1,"line")
for i=0,NN-2 do
  pos[2*i+1]=-gwsize/2+gwsize/NN*(i+1)
end

--補完曲線の算定(ティム氏の簡易モーションパスより一部を改変して使用)
XX={}  
YY={}
XX[0]=-gwsize/2
YY[0]=ghsize/2
XX[NN]=gwsize/2
YY[NN]=-ghsize/2
for i=1,NN-1 do
  XX[i]=pos[2*(i-1)+1]
  YY[i]=pos[2*(i-1)+2]
end

function PassXYZ(s) -- s<=1
  Ns=NN*s
  Ns1=math.floor(Ns)
  Ns2=(Ns-Ns1)/2
  if Ns1<=0 then
    nx=Ax[1]*Ns2*Ns2+Bx[1]*Ns2+Cx[1]
    ny=Ay[1]*Ns2*Ns2+By[1]*Ns2+Cy[1]
  elseif Ns1==NN-1 then
    SS1=Ns2+0.5
    nx=Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1]
    ny=Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1]
  elseif s==1 then
    nx=XX[NN]
    ny=YY[NN]
  else
    SS1=Ns2+0.5
    SS2=Ns2
    RS=2*Ns2
    nx=(Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1])*(1-RS)+RS*(Ax[Ns1+1]*SS2*SS2+Bx[Ns1+1]*SS2+Cx[Ns1+1])
    ny=(Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1])*(1-RS)+RS*(Ay[Ns1+1]*SS2*SS2+By[Ns1+1]*SS2+Cy[Ns1+1])
  end
  return nx,ny
end

Ax={};Bx={};Cx={};
Ay={};By={};Cy={};
for M=1,NN-1 do
  Ax[M]=2*XX[M-1]-4*XX[M]+2*XX[M+1]
  Bx[M]=-3*XX[M-1]+4*XX[M]-XX[M+1]
  Cx[M]=XX[M-1]
  Ay[M]=2*YY[M-1]-4*YY[M]+2*YY[M+1]
  By[M]=-3*YY[M-1]+4*YY[M]-YY[M+1]
  Cy[M]=YY[M-1]
end

obj.setoption("drawtarget","tempbuffer",obj.screen_w*bufsize/100,obj.screen_h*bufsize/100)

--加減速移動
dpx,dp = PassXYZ(obj.frame/obj.totalframe)
dp=dp/ghsize+0.5
if(gn==1) then
  dp=math.min(1,math.max(dp,0))
end
function ADC(tr,jdg)
  if(jdg==0) then
    adc=obj.getvalue(tr)
  else
    adc=obj.getvalue(tr,0,0)+(obj.getvalue(tr,0,-1)-obj.getvalue(tr,0,0))*(1-dp)
  end
  return adc
end
obj.draw(0,0,0,1,1,ADC(0,rx),ADC(1,ry),ADC(2,rz))

--グラフ表示
if(hojo==1) then
  Nmax=NN*BN

  --ライン描画
  obj.load("figure","四角形",col,1)
  obj.setoption("blend","alpha_mix")
  x0 = XX[0]
  y0 = YY[0]
  for i=1,Nmax do
    x1,y1 = PassXYZ(i/(NN*BN))
    if(gn==1) then
      y1=math.min(ghsize/2,math.max(y1,-ghsize/2))
    end
    r = math.atan2(y0-y1,x1-x0)
    dx = math.sin(r)*l
    dy = math.cos(r)*l
    obj.drawpoly(x0-dx,y0-dy,0,x1-dx,y1-dy,0,x1+dx,y1+dy,0,x0+dx,y0+dy,0)
    x0 = x1
    y0 = y1
  end

  --斜め線の描画
  r=math.atan2(ghsize,gwsize)
  dx = math.sin(r)*l/2
  dy = math.cos(r)*l/2
  obj.drawpoly(XX[0]-dx,YY[0]-dy,0,XX[NN]-dx,YY[NN]-dy,0,XX[NN]+dx,YY[NN]+dy,0,XX[0]+dx,YY[0]+dy,0,
               0,0,1,0,1,1,0,1, 0.5)

  --頂点の描画
  obj.load("figure","円",col,l*8)
  for i=0,Nmax do
    x0,y0 = PassXYZ(i/(NN*BN))
    if(gn==1) then
      y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
    end
    obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)
  end

  --青い点の描画
  l=l*1.5
  obj.load("figure","円",0x0000ff,l*8)
  for i=1,NN-1 do
    x0,y0=XX[i],YY[i]
    if(gn==1) then
      y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
    end
    obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)
  end

  --現在地の描画
  obj.load("figure","円",0xff0000,l*8)
  x0,y0 = PassXYZ(obj.frame/obj.totalframe)
  if(gn==1) then
    y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
  end
  obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)

  obj.setoption("blend",0)
end

obj.load("tempbuffer")

@加減速エディタ_その他
--track0:拡大,0,800,100
--track1:透明度,0,100,0
--track2:縦横比,-100,100,0
--track3:頂点数,1,16,1,1
--dialog:拡大あり/chk,ss=1;透明度あり/chk,aa=1;縦横比あり/chk,as=1;グラフ内[0-1],gn=1;座標,pos={};仮想bufサイズ[%],bufsize=100;グラフ表示/chk,hojo=1;G横サイズ,gwsize=400;G縦サイズ,ghsize=300;G色/col,col=0xffff00;Gライン幅,line=5;G分割数,BN=20;

l=math.floor(line)/2
NN=obj.track3+1

--アンカーポイントの設置
obj.setanchor("pos",NN-1,"line")
for i=0,NN-2 do
  pos[2*i+1]=-gwsize/2+gwsize/NN*(i+1)
end

--補完曲線の算定(ティム氏の簡易モーションパスより一部を改変して使用)
XX={}  
YY={}
XX[0]=-gwsize/2
YY[0]=ghsize/2
XX[NN]=gwsize/2
YY[NN]=-ghsize/2
for i=1,NN-1 do
  XX[i]=pos[2*(i-1)+1]
  YY[i]=pos[2*(i-1)+2]
end

function PassXYZ(s) -- s<=1
  Ns=NN*s
  Ns1=math.floor(Ns)
  Ns2=(Ns-Ns1)/2
  if Ns1<=0 then
    nx=Ax[1]*Ns2*Ns2+Bx[1]*Ns2+Cx[1]
    ny=Ay[1]*Ns2*Ns2+By[1]*Ns2+Cy[1]
  elseif Ns1==NN-1 then
    SS1=Ns2+0.5
    nx=Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1]
    ny=Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1]
  elseif s==1 then
    nx=XX[NN]
    ny=YY[NN]
  else
    SS1=Ns2+0.5
    SS2=Ns2
    RS=2*Ns2
    nx=(Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1])*(1-RS)+RS*(Ax[Ns1+1]*SS2*SS2+Bx[Ns1+1]*SS2+Cx[Ns1+1])
    ny=(Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1])*(1-RS)+RS*(Ay[Ns1+1]*SS2*SS2+By[Ns1+1]*SS2+Cy[Ns1+1])
  end
  return nx,ny
end

Ax={};Bx={};Cx={};
Ay={};By={};Cy={};
for M=1,NN-1 do
  Ax[M]=2*XX[M-1]-4*XX[M]+2*XX[M+1]
  Bx[M]=-3*XX[M-1]+4*XX[M]-XX[M+1]
  Cx[M]=XX[M-1]
  Ay[M]=2*YY[M-1]-4*YY[M]+2*YY[M+1]
  By[M]=-3*YY[M-1]+4*YY[M]-YY[M+1]
  Cy[M]=YY[M-1]
end

obj.setoption("drawtarget","tempbuffer",obj.screen_w*bufsize/100,obj.screen_h*bufsize/100)

--加減速移動
dpx,dp = PassXYZ(obj.frame/obj.totalframe)
dp=dp/ghsize+0.5
if(gn==1) then
  dp=math.min(1,math.max(dp,0))
end
function ADC(tr,jdg)
  if(jdg==0) then
    adc=obj.getvalue(tr)
  else
    adc=obj.getvalue(tr,0,0)+(obj.getvalue(tr,0,-1)-obj.getvalue(tr,0,0))*(1-dp)
  end
  return adc
end
obj.aspect=ADC(2,as)/100
obj.draw(0,0,0,ADC(0,ss)/100,1-ADC(1,aa)/100)

--グラフ表示
if(hojo==1) then
  Nmax=NN*BN

  --ライン描画
  obj.load("figure","四角形",col,1)
  obj.setoption("blend","alpha_mix")
  x0 = XX[0]
  y0 = YY[0]
  for i=1,Nmax do
    x1,y1 = PassXYZ(i/(NN*BN))
    if(gn==1) then
      y1=math.min(ghsize/2,math.max(y1,-ghsize/2))
    end
    r = math.atan2(y0-y1,x1-x0)
    dx = math.sin(r)*l
    dy = math.cos(r)*l
    obj.drawpoly(x0-dx,y0-dy,0,x1-dx,y1-dy,0,x1+dx,y1+dy,0,x0+dx,y0+dy,0)
    x0 = x1
    y0 = y1
  end

  --斜め線の描画
  r=math.atan2(ghsize,gwsize)
  dx = math.sin(r)*l/2
  dy = math.cos(r)*l/2
  obj.drawpoly(XX[0]-dx,YY[0]-dy,0,XX[NN]-dx,YY[NN]-dy,0,XX[NN]+dx,YY[NN]+dy,0,XX[0]+dx,YY[0]+dy,0,
               0,0,1,0,1,1,0,1, 0.5)

  --頂点の描画
  obj.load("figure","円",col,l*8)
  for i=0,Nmax do
    x0,y0 = PassXYZ(i/(NN*BN))
    if(gn==1) then
      y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
    end
    obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)
  end

  --青い点の描画
  l=l*1.5
  obj.load("figure","円",0x0000ff,l*8)
  for i=1,NN-1 do
    x0,y0=XX[i],YY[i]
    if(gn==1) then
      y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
    end
    obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)
  end

  --現在地の描画
  obj.load("figure","円",0xff0000,l*8)
  x0,y0 = PassXYZ(obj.frame/obj.totalframe)
  if(gn==1) then
    y0=math.min(ghsize/2,math.max(y0,-ghsize/2))
  end
  obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)

  obj.setoption("blend",0)
end

obj.load("tempbuffer")