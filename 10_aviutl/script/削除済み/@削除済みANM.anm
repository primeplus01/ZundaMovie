@明滅
--track0:間隔[ms],0,5000,1000
--track1:モード,0,3,0,1
t=obj.track0/1000
mode=obj.track1
if(mode<1) then          --ノーマル
 if (obj.time%t<t/2) then
  obj.alpha = 1.0
 else
  obj.alpha = 0.0
 end
elseif(mode<2) then      --フェードアウト
 obj.alpha = 1.0-(obj.time%t)/t
elseif(mode<3) then      --フェードイン
 obj.alpha = (obj.time%t)/t
else                     --フェードイン
 obj.alpha = math.sin(2*math.pi*obj.time*(1/t))*0.5+0.5
end

@ものまね
--track0:基準layer,1,100,1,1
--track1:時間差[ms],-5000,5000,0
--dialog:X倍率,xx=100;Y倍率,yy=100;Z倍率,zz=100;拡大倍率,ss=100;
lay=obj.track0
t=obj.track1/1000
obj.ox=obj.getvalue("layer" .. lay .. ".x",obj.time+t)*xx/100
obj.oy=obj.getvalue("layer" .. lay .. ".y",obj.time+t)*yy/100
obj.oz=obj.getvalue("layer" .. lay .. ".z",obj.time+t)*zz/100
obj.zoom=obj.getvalue("layer" .. lay .. ".zoom",obj.time+t)/100*ss/100

@左寄せとか
--track0:X軸[%],-100,100,0
--track1:Y軸[%],-100,100,0
obj.ox=obj.w/2*obj.track0/100
obj.oy=obj.h/2*obj.track1/100

@加減速移動β
--track0:加減速,1,5,2,1
--track1:減/加/S,0,2,0,1
--track2:非表示,0,1,0,1
--dialog:X軸/chk,xx=1;Y軸/chk,yy=1;Z軸/chk,zz=1;拡大率/chk,ss=1;色/col,color=0xff0000;

beki=obj.track0
--beki=math.floor(obj.track0)
mode=math.floor(obj.track1)

t=1-obj.time/obj.totaltime

if(t>0) then
  if(t>1) then
    t=1
  end
if(mode<1) then
  t=t^beki
elseif(mode<2) then
  t=1-(1-t)^beki
else
  if(t<=0.5) then
    t=(2*t)^beki/2
  else
    t=(1-(1-(t-0.5)*2)^beki)/2+0.5
  end
end

dx=(obj.getvalue("x",obj.totaltime)-obj.getvalue("x",0))*(1-t)
dy=(obj.getvalue("y",obj.totaltime)-obj.getvalue("y",0))*(1-t)
dz=(obj.getvalue("z",obj.totaltime)-obj.getvalue("z",0))*(1-t)
ds=(obj.getvalue("zoom",obj.totaltime)-obj.getvalue("zoom",0))*(1-t)

obj.ox=obj.ox+(obj.getvalue("x",0)+dx-obj.getvalue("x"))*xx
obj.oy=obj.oy+(obj.getvalue("y",0)+dy-obj.getvalue("y"))*yy
obj.oz=obj.oz+(obj.getvalue("z",0)+dz-obj.getvalue("z"))*zz
obj.zoom=obj.zoom+(obj.getvalue("zoom",0)+ds-obj.getvalue("zoom"))*ss/100
end
obj.draw()

--補助線
a=1/2
if(obj.track2==1) then
a=0
end

h=obj.screen_h/3
zoom=100/obj.getvalue("zoom")

obj.setoption("billboard",3)
obj.load("figure","円",color,50)
obj.draw(-h-obj.getvalue("x"),h-obj.getvalue("y"),0,zoom,a)
obj.setoption("billboard",3)
obj.load("figure","円",color,50)
obj.draw(h-obj.getvalue("x"),-h-obj.getvalue("y"),0,zoom,a)

obj.setoption("billboard",3)
obj.load("figure","円",color,10)
n=20
for i=0,n do
kn=i/n
kt=1-kn

if(mode<1) then
  kt=kt^beki
elseif(mode<2) then
  kt=1-(1-kt)^beki
else
  if(kt<=0.5) then
    kt=(2*kt)^beki/2
  else
    kt=(1-(1-(kt-0.5)*2)^beki)/2+0.5
  end
end
x=kn*h*2-h-obj.getvalue("x")
y=-h+kt*h*2-obj.getvalue("y")
obj.draw(x,y,0,zoom,a)
end

@magicA_大円
--track0:サイズ,1,1000,600
--track1:回転速度,-200,200,80
--track2:登場時間,-10,10,1.5
--track3:ブラー,0,75,40
--color:0xffffff

s=obj.track0
r=obj.track1*obj.time
t=obj.track2

--大きな円
aa=1

if(t<0) then
ta=(t-obj.time+obj.totaltime)/t
else
ta=(t-obj.time)/t
end

if(ta>0) then
  if(ta>1) then
    ta=1
    aa=0
  end
else
ta=0
end
ta=ta*ta

obj.load("figure","円",color,s*1.005,3)
obj.effect()
obj.draw(0,0,0,1-0.75*ta,aa,-180*ta,-180*ta,0)
obj.load("figure","円",color,s*3/4*1.015,2)
obj.effect()
obj.draw(0,0,0,1-0.65*ta,aa,-180*ta,0,0)
obj.load("figure","円",color,s*0.53,2)
obj.effect()
obj.draw(0,0,0,1-0.75*ta,aa,-360*ta,-360*ta,0)
obj.load("figure","円",color,s*0.4,2)
obj.effect()
obj.draw(0,0,0,1-0.5*ta,aa,-180*ta,-360*ta,0)

--四角形
ab=1

if(t<0) then
tb=(t/4-obj.time+obj.totaltime+t*0.9)/t*4
else
tb=(t/4-obj.time+t*0.9)/t*4
end

if(tb>0) then
  if(tb>1) then
    tb=1
    ab=0
  end
else
tb=0
end
tb=tb*tb

obj.load("figure","四角形",color,s*0.53,2)
obj.effect()
obj.draw(0,0,0,1-0.5*tb,ab,20*tb,-180*tb,-r)
obj.load("figure","四角形",color,s*0.53,2)
obj.effect()
obj.draw(0,0,0,1-0.6*tb,ab,-200*tb,20*tb,r)


--４小円
blur=obj.track3
ac=1

if(t<0) then
tc=(t/2-obj.time+obj.totaltime+t)/t*2
else
tc=(t/2-obj.time+t)/t*2
end

if(tc>0) then
  if(tc>1) then
    tc=1
    ac=0
  end
else
tc=0
end
tc=tc*tc

sx=math.sin(-r*math.pi/180)*s*7/8/2
sy=-math.cos(-r*math.pi/180)*s*7/8/2

obj.load("figure","円",color,s/8,2)
obj.effect()
obj.effect("放射ブラー","範囲",blur*tc)
obj.draw(sx,sy,0,1+tc,ac*(1-tc))
obj.load("figure","円",color,s/8,2)
obj.effect()
obj.effect("放射ブラー","範囲",blur*tc)
obj.draw(sy,-sx,0,1+tc,ac*(1-tc))
obj.load("figure","円",color,s/8,2)
obj.effect()
obj.effect("放射ブラー","範囲",blur*tc)
obj.draw(-sx,-sy,0,1+tc,ac*(1-tc))
obj.load("figure","円",color,s/8,2)
obj.effect()
obj.effect("放射ブラー","範囲",blur*tc)
obj.draw(-sy,sx,0,1+tc,ac*(1-tc))


@magicB_テキスト4
--track0:半径調整,0,150,100
fl=obj.track0
tr=obj.index*90-r
obj.ox=math.sin(tr*math.pi/180)*s*7/8/2*fl/100
obj.oy=-math.cos(tr*math.pi/180)*s*7/8/2*fl/100
obj.rz=tr
obj.zoom=1+tc
obj.alpha=ac*(1-tc)
obj.effect("放射ブラー","範囲",blur*tc)


@magicC_テキスト大
--track0:半径調整,0,150,100
tbl=obj.track0

if(t<0) then
tbt=(t/10-obj.time+obj.totaltime+t*0.5+obj.index/obj.num*t*0.6)/t*10
else
tbt=(t/10-obj.time+t*0.5+obj.index/obj.num*t*0.6)/t*10
end

if(tbt>0) then
  if(tbt>1) then
    tbt=1
    obj.alpha=0
  end
else
tbt=0
end
tbt=tbt*tbt

tr=360*obj.index/obj.num-r
obj.ox=math.sin(tr*math.pi/180)*s*7/8/2*tbl/100
obj.oy=-math.cos(tr*math.pi/180)*s*7/8/2*tbl/100
obj.rz=tr
obj.alpha=1-tbt
g=math.floor(obj.num/4)
if(obj.index%g==0 or obj.index%g==1 or obj.index%g==g-1) then
obj.alpha=0
end


@magicD_テキスト小
--track0:半径調整,0,150,100
tsl=obj.track0

if(t<0) then
tst=(t/10-obj.time+obj.totaltime+t*0.5+(obj.num-obj.index)/obj.num*t*0.6)/t*10
else
tst=(t/10-obj.time+t*0.5+(obj.num-obj.index)/obj.num*t*0.6)/t*10
end

if(tst>0) then
  if(tst>1) then
    tst=1
    obj.alpha=0
  end
else
tst=0
end
tst=tst*tst

tr=360*obj.index/obj.num+r
obj.ox=math.sin(tr*math.pi/180)*s*0.465/2*tsl/100
obj.oy=-math.cos(tr*math.pi/180)*s*0.465/2*tsl/100
obj.rz=tr
obj.alpha=1-tst
if(obj.index%(obj.num/4)==0) then
obj.zoom=1.2
end

@MAGI_A_object
--track0:サイズ,1,1000,400
--track1:回転速度,-200,200,80
--track2:四角調整,0,200,100
--color:0xffffff
s=obj.track0
r=obj.track1*obj.time
st=obj.track2
obj.load("figure","円",color,s,3)
obj.effect()
obj.draw()
obj.load("figure","円",color,s*0.9,2)
obj.effect()
obj.draw()
obj.load("figure","四角形",color,s/2*0.9*math.sqrt(2)*0.99,2)
obj.effect()
for j=0,1 do
for i=0,1 do
obj.draw(0,0,0,st/100,1,0,0,r*(1-2*j)+45*i)
end
end

@MAGI_B_object
--track0:サイズ,1,1000,400
--track1:回転速度,-200,200,80
--track2:三角調整,0,200,99
--track3:登場時間,-10,10,0
--color:0xffffff
s=obj.track0
r=obj.track1*obj.time
st=obj.track2
t=obj.track3
obj.load("figure","円",color,s,3)
obj.effect()
obj.draw()
obj.load("figure","円",color,s*0.9,2)
obj.effect()
obj.draw()

if(t<0) then
ta=(t-obj.time+obj.totaltime)/t
else
ta=(t-obj.time)/t
end

if(ta>0) then
  if(ta>1) then
    ta=1
  end
else
ta=0
end
ta=ta*ta

size=s/2*math.sqrt(3)*0.9
ue=size/2+s/4*0.9
sita=size-ue
obj.load("figure","四角形",color,size)
obj.effect("クリッピング","上",ue-1,"下",sita-1,"右",size*ta)
obj.effect()
for j=0,1 do
for i=0,5 do
obj.draw(0,0,0,st/100,1,0,0,r*(1-2*j)+60*i)
end
end

@MAGI_C_object
--track0:サイズ,1,1000,400
--track1:回転速度,-200,200,80
--track2:三角調整,0,200,99
--track3:登場時間,-10,10,0
--color:0xffffff
s=obj.track0
r=obj.track1*obj.time
st=obj.track2
t=obj.track3
obj.load("figure","円",color,s,3)
obj.effect()
obj.draw()
obj.load("figure","円",color,s*0.9,2)
obj.effect()
obj.draw()

if(t<0) then
ta=(t-obj.time+obj.totaltime)/t
else
ta=(t-obj.time)/t
end

if(ta>0) then
  if(ta>1) then
    ta=1
  end
else
ta=0
end
ta=ta*ta

size=s/2*math.cos(math.pi*18/180)*2*0.9
ue=size/2-s/2*math.sin(math.pi*18/180)*0.9
sita=size-ue
obj.load("figure","四角形",color,size)
obj.effect("クリッピング","上",ue-1,"下",sita-2,"右",size*ta)
obj.effect()
for j=0,1 do
for i=0,4 do
obj.draw(0,0,0,st/100,1,0,0,r*(1-2*j)+72*i)
end
end

@MAGI_text
--track0:半径調整,0,150,100
--track1:速度調整,-200,200,100
l=obj.track0
tr=360*obj.index/obj.num+r*obj.track0/100
obj.ox=math.sin(tr*math.pi/180)*s*0.95/2*l/100
obj.oy=-math.cos(tr*math.pi/180)*s*0.95/2*l/100
obj.rz=tr 

@TAランダム文字で登場A
--track0:時間[ms],-5000,5000,1000
--track1:間隔[ms],0,2000,300
--track2:拡大率,0,800,100
--track3:y軸距離,-1000,1000,-200
--check0:フェード,1
ta=obj.track0/1000
tb=obj.track1/1000
s=obj.track2
y=obj.track3

num=obj.num
word={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
if( ta < 0 ) then
  i=(ta-obj.num*tb-obj.time+obj.totaltime+obj.index*tb)/ta
else
  i=(ta-obj.time+obj.index*tb)/ta
end
if( i > 0 ) then
  if( i > 1 ) then
    obj.alpha = 0
    i = 1
  end
  i = i*i
  obj.alpha = 0
end
fade=0
if( obj.check0 ) then
fade=1
end

@TAランダム文字で登場B
if( ta < 0 ) then
  i=(ta-obj.num*tb-obj.time+obj.totaltime+obj.index*tb)/ta
else
  i=(ta-obj.time+obj.index*tb)/ta
end
if( i > 0 ) then
  if( i > 1 ) then
    obj.alpha = 0
    i = 1
  end
  i = i*i
  obj.alpha=obj.alpha*(1-i*fade)
  obj.zoom=obj.zoom+i*(s-100)/100
  obj.oy=obj.oy+y*i
else
  obj.alpha=0
end

@TAランダム文字で登場A-ランダム順
--track0:時間[ms],-5000,5000,1000
--track1:間隔[ms],0,2000,300
--track2:拡大率,0,800,100
--track3:y軸距離,-1000,1000,-200
--check0:フェード,1
ta=obj.track0/1000
tb=obj.track1/1000
s=obj.track2
y=obj.track3

num=obj.num
word={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
if( ta < 0 ) then
  i=(ta-obj.num*tb-obj.time+obj.totaltime+rand(0,100*(obj.num-1),-(obj.index+1),0)/100*tb)/ta
else
  i=(ta-obj.time+rand(0,100*(obj.num-1),-(obj.index+1),0)/100*tb)/ta
end
if( i > 0 ) then
  if( i > 1 ) then
    obj.alpha = 0
    i = 1
  end
  i = i*i
  obj.alpha = 0
end
fade=0
if( obj.check0 ) then
fade=1
end

@TAランダム文字で登場B-ランダム順
if( ta < 0 ) then
  i=(ta-obj.num*tb-obj.time+obj.totaltime+rand(0,100*(obj.num-1),-(obj.index+1),0)/100*tb)/ta
else
  i=(ta-obj.time+rand(0,100*(obj.num-1),-(obj.index+1),0)/100*tb)/ta
end
if( i > 0 ) then
  if( i > 1 ) then
    obj.alpha = 0
    i = 1
  end
  i = i*i
  obj.alpha=obj.alpha*(1-i*fade)
  obj.zoom=obj.zoom+i*(s-100)/100
  obj.oy=obj.oy+y*i
else
  obj.alpha=0
end

@TAテキスト枠
--track0:文字数,1,100,15,1
--track1:行数,1,100,5,1
--track2:文字間隔,0,256,34
--track3:行間隔,0,256,34
--dialog:横位置[0〜2],col_mode=0;縦位置[0〜2],row_mode=0;
col=obj.track0
row=obj.track1
s_col=obj.track2
s_row=obj.track3
for i=0,row do
if(obj.index>=i*col) then
if(obj.index<(i+1)*col) then
obj.oy=s_row*i
end
end
end
if(obj.index>=col*row) then
obj.alpha=0
end
obj.index=obj.index%col
obj.ox=obj.index*s_col

if(col_mode<1) then
  obj.ox=obj.ox+s_col/2
elseif(col_mode<2) then
  obj.ox=obj.ox-(col-1)*s_col/2
else
  obj.ox=obj.ox-s_col/2-(col-1)*s_col
end

if(row_mode<1) then
  obj.oy=obj.oy+s_row/2
elseif(row_mode<2) then
  obj.oy=obj.oy-(row-1)*s_row/2
else
  obj.oy=obj.oy-s_row/2-(row-1)*s_row
end

@TAランダム位置から拡大
--track0:時間[s],0,10,2,0.01
--track1:間隔[s],0,10,1,0.01
--track2:傾き範囲,0,360,30
--check0:縮小,0

ta=obj.track0 tb=obj.track1 rz=obj.track2
t=(ta-obj.time+obj.index*tb)/ta
a=t
if( t > 0 ) then
  if( t > 1 ) then
    t = 1
    a = a*0
  end
else
  t=0
end
range_w=obj.screen_w/2-obj.w*obj.zoom
range_h=obj.screen_h/2-obj.h*obj.zoom
obj.ox=rand(-range_w,range_w,obj.index,0)
obj.oy=rand(-range_h,range_h,obj.index,0)
obj.zoom=1-t
obj.alpha=a
obj.rz=obj.rand(-rz/2,rz/2,0,obj.index)
if(obj.check0) then
  obj.zoom=t
end

@格子クリッピング(旧ver)
--track0:サイズ,5,500,50
--track1:隙間,0,100,0
--track2:回転,-360,360,0
obj.effect()

s=obj.track0
d=s*obj.track1/100/2
r=obj.track2/180*math.pi
ny=math.floor(obj.h/s/2)
nx=math.floor(obj.w/s/2)
w=obj.w/2
h=obj.h/2

for i=-ny,ny-1 do
y0=s*i+d
y1=s*(i+1)-d

for j=-nx,nx-1 do
x0=s*j+d
x1=s*(j+1)-d

lx0=math.cos(math.atan2(y0,x0)+r)*math.sqrt(x0^2+y0^2)
lx1=math.cos(math.atan2(y0,x1)+r)*math.sqrt(x1^2+y0^2)
lx2=math.cos(math.atan2(y1,x1)+r)*math.sqrt(x1^2+y1^2)
lx3=math.cos(math.atan2(y1,x0)+r)*math.sqrt(x0^2+y1^2)

ly0=math.sin(math.atan2(y0,x0)+r)*math.sqrt(x0^2+y0^2)
ly1=math.sin(math.atan2(y0,x1)+r)*math.sqrt(x1^2+y0^2)
ly2=math.sin(math.atan2(y1,x1)+r)*math.sqrt(x1^2+y1^2)
ly3=math.sin(math.atan2(y1,x0)+r)*math.sqrt(x0^2+y1^2)

obj.drawpoly(lx0,ly0,0,lx1,ly1,0,lx2,ly2,0,lx3,ly3,0,
lx0+w,ly0+h,lx1+w,ly1+h,lx2+w,ly2+h,lx3+w,ly3+h)
end
end